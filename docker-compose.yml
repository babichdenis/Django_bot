version: '3.8'

services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_DB: ${DB_NAME:-postgres} # Используем переменную окружения или значение по умолчанию
      POSTGRES_USER: ${DB_USER:-user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data # Исправлено имя тома
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER:-user} -d ${DB_NAME:-mydb}" ]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped # Перезапуск контейнера при сбоях
    networks:
      - app_network # Подключаем к сети

  admin_panel:
    build:
      context: ./admin_panel
      dockerfile: Dockerfile
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --no-input &&
             python manage.py runserver 0.0.0.0:8000"
    env_file:
      - ./.env
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy # Ждем, пока PostgreSQL не станет доступным
    restart: unless-stopped # Перезапуск контейнера при сбоях
    networks:
      - app_network # Подключаем к сети

  bot_project:
    build:
      context: ./bot_project
      dockerfile: Dockerfile
    env_file:
      - ./.env
    depends_on:
      postgres:
        condition: service_healthy # Ждем, пока PostgreSQL не станет доступным
    restart: unless-stopped # Перезапуск контейнера при сбоях
    networks:
      - app_network # Подключаем к сети

volumes:
  postgres_data:
    # Определение тома

networks:
  app_network:
    # Определение сети
    driver: bridge
